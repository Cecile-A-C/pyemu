Notes on Object-Oriented Programming
------------------------------------

Analysis using PEST and PEST++ were traditionally run by writing a series of
input files (template, instruction, and contol files) and running a desired
program from either suite. pyEMU provides a programmatic way to interact with
PEST and PEST++ that will allow for easier creation of necessary input files and
interpretation of the output generated by the suite of programs. The
programmatic approach also assists in creation of reproducible research [FB16]_
by documenting choices made by the analyst in the generation of input files, in
steps of the analysis, or in the interpretation of results. pyEMU also extends
the functionality of PEST and PEST++ especially for performing linear and non-
linear uncertainty analysis. Users familiar with PEST and PEST++ input files
will find the terminology used in pyEMU familiar, the main difference between
using pyEMU and traditional methods is in the writing of :term:`client code` to
perform the desired analysis.

The general workflow for pyEMU is to create an :term:`instance` of a class, which
is also known as an object.  The simplest object will only have attributes,
or data, associated with it and my be thought of as a data structure.  Many
pyEMU objects also have :term:`instance methods` associated with them which
allow the user to either manipulate attributes of the object or use the current
attributes, also known as the :term:`state` of the object, to perform a task.

For example, 
