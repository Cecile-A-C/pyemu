Notes on Object-Oriented Programming
------------------------------------

Analysis using PEST and PEST++ were traditionally run by writing a series of
input files (template, instruction, and contol files) and running a desired
program from either suite. pyEMU provides a programmatic way to interact with
PEST and PEST++ that allows for easier creation of necessary input files and
interpretation of the output generated by the suite of programs. The
programmatic approach also assists in creation of reproducible research [FB16]_
by documenting choices made by the analyst in the generation of input files, in
steps of the analysis, or in the interpretation of results. pyEMU also extends
the functionality of PEST and PEST++ especially for performing linear and non-
linear uncertainty analysis. Users familiar with PEST and PEST++ input files
will find the terminology used in pyEMU familiar, the main difference between
using pyEMU and traditional methods is in the writing of :term:`client code` to
perform the desired analysis.

The general workflow for pyEMU is to first create an :term:`instance` (:term:`object`) 
of a class.  The simplest object will only have attributes,
or data, associated with it and may be thought of as a data structure.  Many
pyEMU objects also have :term:`instance methods` associated with them which
allow the user to either manipulate attributes of the object or use the current
attributes, also known as the :term:`state` of the object, to perform tasks.

.. rubric:: For example

The Pst class jupyter notebook linked below uses the pyEMU
class Pst to create an object called *p*.  Attributes of the object
can then be accessed using p.*attribute*, for example, the parameter_data
are stored in the object as a pandas [MCK10]_ dataframe and can be accessed
using p.parameter_data

One of the methods of the object used in the example notebook is
the get() method which will generate a new Pst instance using
a subset of the parameters or observations from an existing 
object. To get a new object with the first 10 parameters and observations::


   pnew = p.get(p.par_names[:10], p.obs_names[:10])

The attributes and methods associated with all the classes of pyEMU and
the helper methods are summarized in the :ref:`Technical` section.

.. toctree:: 
   
   pst_demo