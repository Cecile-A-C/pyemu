name: pyemu continuous integration

on: 
  schedule:
    - cron: '0 8 * * *' # run at 8 AM UTC (12 am PST)
  push:
  pull_request:

jobs:
  pyemuCI:
    name: autotests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.7, 3.6]
        run-type: [std]
        test-pth: [""]
        include:
          - os: ubuntu-latest
            python-version: 3.8
            run-type: nb
            test-path: autotest_notebooks.py

    steps:
    - name: Setup Ninja
      if: ${{ runner.os }} == "Windows"
      uses: seanmiddleditch/gha-setup-ninja@master
      with:
        # ninja version to download. Default: 1.10.0
        version: 1.10.0

     # check out repo
    - name: Checkout pyemu repo
      uses:  actions/checkout@v2.3.4  

    - name: Cache Miniconda
      uses: actions/cache@v2.1.0
      env:
        # Increase this value to reset cache if environment.yml has changed
        CACHE_NUMBER: 0
      with:
        path: ~/conda_pkgs_dir
        key: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.run-type }}-${{ env.CACHE_NUMBER }}-${{ hashFiles('etc/environment.yml') }}
    
    # - name: Get specific version CMake, v3.19
    #  uses: lukka/get-cmake@v3.19 

    # Standard python fails on windows without GDAL installation
    # Using custom bash shell ("shell: bash -l {0}") with Miniconda
    - name: Setup Miniconda
      uses: conda-incubator/setup-miniconda@v2.0.0
      with:
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
        channels: conda-forge
        auto-update-conda: true
        activate-environment: pyemu
        use-only-tar-bz2: true

    - name: Add jupyter and jupytext to notebooks run
      if: matrix.run-type == 'nb'
      shell: bash -l {0}
      run: |
        mamba install --name pyemu jupyter jupytext

    - name: Add packages to pyemu environment using mamba or conda
      shell: bash -l {0}
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          conda env update --name pyemu --file etc/environment.yml
        else
          mamba env update --name pyemu --file etc/environment.yml
        fi
    
    - name: PESTPP exe install
      shell: bash -l {0}
      run: |
        if [[ ! -d "$HOME/.local/bin" ]]; then
            mkdir -p "$HOME/.local/bin";
        fi
        # export PATH="$HOME/.local/bin:$PATH"
        # ln -fs /usr/bin/gfortran-6 "$HOME/.local/bin/gfortran" && gfortran --version
        # ls -l /usr/bin/gfortran-6
        # ln -fs /usr/bin/gcc-6 "$HOME/.local/bin/gcc" && gcc --version
        # ls -l /usr/bin/gcc-6
        # ln -fs /usr/bin/g++-6 "$HOME/.local/bin/g++" && g++ --version
        # ls -l /usr/bin/g++-6
        # export CXX="g++"
        git clone -b develop --depth 1 https://github.com/usgs/pestpp
        cd pestpp
        mkdir build && cd build
        if [ "$RUNNER_OS" == "Windows" ]; then
            cmake -G Ninja -DCMAKE_BUILD_TYPE=Release ..
            ninja
        else
            cmake -DCMAKE_BUILD_TYPE=Release ..
            make -j2
        # cd pestpp/src
        # bindir=../../../../bin/linux COMPILER=gcc CXX=g++ FC=gfortran STATIC=no make -j 20 install
        cd ..
        # do we also need to cp to os specific within .local/bin/? probs...
        find bin -maxdepth 1 -type f -exec cp {} $HOME/.local/bin/. \;
        cd ..
        # might be able to get away without this line? wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
        # might be able to get away without this line? bash miniconda.sh -b -p $HOME/miniconda
        # might be able to get away without this line? export PATH="$HOME/miniconda/bin:$PATH"
        # export PATH="$HOME/pestpp/bin/linux:$PATH"
        # might be able to get away without this line? conda update --yes conda
        # - "export DISPLAY=:99.0"
        # - "sh -e /etc/init.d/xvfb start"
    
    - name: Install Flopy & pyemu?
      shell: bash -l {0}
      run: |
        git clone -b develop --depth 1 https://github.com/modflowpy/flopy.git
        cd flopy
        python setup.py install
        cd ..
        pip install https://github.com/modflowpy/pymake/zipball/master
        python setup.py install

    - name: Add executables directory to path
      shell: bash
      run: |
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: "pst tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest pst_tests.py

    - name: "utils tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest utils_tests.py

    - name: "mat tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest mat_tests.py

    - name: "en tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest en_tests.py

    - name: "la tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest la_tests.py

    - name: "PstFrom tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest pst_from_tests.py

    - name: "da tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest da_tests.py

    - name: "moouu tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest moouu_tests.py       

    - name: "full meal deal tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest full_meal_deal_tests.py
 
    - name: "plot tests"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest plot_tests.py

    - name: "pst tests 2"
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest pst_tests_2.py

    - name: "notebook tests"
      if: matrix.run-type == 'nb'
      shell: bash -l {0}
      run: |
        nosetests -v --with-id --nocapture --with-timer \
        --with-coverage --cover-package=pyemu --cover-xml \
        --cover-xml-file=../coverage.xml -w ./autotest autotest_notebooks.py
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1.0.15
      with:
        file: ./coverage.xml


